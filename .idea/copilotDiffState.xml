<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.App.Starting&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LightsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.LumaNoizApp&quot;&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;.SoundService&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:foregroundServiceType=&quot;mediaPlayback&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;androidx.media3.session.MediaSessionService&quot;/&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/service&gt;&#10;&#10;        &lt;receiver android:name=&quot;.LumaNoizAppWidget&quot; android:exported=&quot;false&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.appwidget.action.APPWIDGET_UPDATE&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;            &lt;meta-data android:name=&quot;android.appwidget.provider&quot;&#10;                android:resource=&quot;@xml/lumanoiz_app_widget_info&quot; /&gt;&#10;        &lt;/receiver&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK&quot; /&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.POST_NOTIFICATIONS&quot;/&gt;&#10;    &lt;uses-permission android:name=&quot;android.permission.WAKE_LOCK&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.App.Starting&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LightsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.LumaNoizApp&quot;&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StrobeLightsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.LumaNoizApp&quot;&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;service&#10;            android:name=&quot;.SoundService&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:foregroundServiceType=&quot;mediaPlayback&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;androidx.media3.session.MediaSessionService&quot;/&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/service&gt;&#10;&#10;        &lt;receiver android:name=&quot;.LumaNoizAppWidget&quot; android:exported=&quot;false&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.appwidget.action.APPWIDGET_UPDATE&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;            &lt;meta-data android:name=&quot;android.appwidget.provider&quot;&#10;                android:resource=&quot;@xml/lumanoiz_app_widget_info&quot; /&gt;&#10;        &lt;/receiver&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/lusion/lumanoiz/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/lusion/lumanoiz/MainActivity.kt" />
              <option name="originalContent" value="package com.lusion.lumanoiz&#10;&#10;import android.content.ComponentName&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawing&#10;import androidx.compose.foundation.layout.windowInsetsPadding&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.core.content.ContextCompat&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.session.MediaController&#10;import androidx.media3.session.SessionToken&#10;import com.lusion.lumanoiz.ui.theme.LumaNoizAppTheme&#10;import android.content.Intent&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        installSplashScreen()&#10;        enableEdgeToEdge()&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            LumaNoizAppTheme {&#10;                // A surface container using the 'background' color from the theme&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    LumaNoizAppScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class Sound(val name: String, val resourceId: Int)&#10;&#10;@Composable&#10;fun LumaNoizAppScreen() {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val userPreferencesRepository = remember { UserPreferencesRepository(context) }&#10;    val sounds = remember {&#10;        listOf(&#10;            Sound(&quot;White Noise&quot;, R.raw.white_noise),&#10;            Sound(&quot;Brown Noise&quot;, R.raw.brown_noise),&#10;            Sound(&quot;Grey Noise&quot;, R.raw.grey_noise),&#10;            Sound(&quot;Pink Noise&quot;, R.raw.pink_noise),&#10;            Sound(&quot;Relaxing Smoothed Brown Noise&quot;, R.raw.relaxing_smoothed_brown_noise),&#10;            Sound(&quot;Soft Brown Noise&quot;, R.raw.soft_brown_noise)&#10;        )&#10;    }&#10;&#10;    var currentPlayingSound by remember { mutableStateOf&lt;Sound?&gt;(null) }&#10;    var isPlaying by remember { mutableStateOf(false) }&#10;&#10;    // Read anchor preference from UserPreferencesRepository&#10;    val isAnchoredToBottom by userPreferencesRepository.isAnchoredToBottom.collectAsState(initial = false)&#10;&#10;    // Media3 Controller setup&#10;    var mediaController by remember { mutableStateOf&lt;MediaController?&gt;(null) }&#10;&#10;    LaunchedEffect(context) {&#10;        val sessionToken = SessionToken(context, ComponentName(context, SoundService::class.java))&#10;        val controllerFuture = MediaController.Builder(context, sessionToken).buildAsync()&#10;        controllerFuture.addListener(&#10;            {&#10;                mediaController = controllerFuture.get()&#10;            },&#10;            ContextCompat.getMainExecutor(context)&#10;        )&#10;    }&#10;&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            mediaController?.release()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .pointerInput(Unit) {&#10;                detectTapGestures(&#10;                    onLongPress = {&#10;                        coroutineScope.launch {&#10;                            userPreferencesRepository.setAnchoredToBottom(!isAnchoredToBottom)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .windowInsetsPadding(WindowInsets.safeDrawing)&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = if (isAnchoredToBottom) Arrangement.Bottom else Arrangement.Top&#10;        ) {&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Adaptive(minSize = 180.dp),&#10;                modifier = Modifier.weight(1f),&#10;                contentPadding = PaddingValues(8.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(sounds) { sound -&gt;&#10;                    SoundCard(&#10;                        sound = sound,&#10;                        isPlaying = sound == currentPlayingSound &amp;&amp; isPlaying,&#10;                        onClick = {&#10;                            if (sound == currentPlayingSound) {&#10;                                if (isPlaying) {&#10;                                    mediaController?.pause()&#10;                                } else {&#10;                                    mediaController?.play()&#10;                                }&#10;                                isPlaying = !isPlaying&#10;                            } else {&#10;                                mediaController?.apply {&#10;                                    setMediaItem(MediaItem.fromUri(&quot;android.resource://${context.packageName}/${sound.resourceId}&quot;))&#10;                                    prepare()&#10;                                    play()&#10;                                }&#10;                                currentPlayingSound = sound&#10;                                isPlaying = true&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    val intent = Intent(context, LightsActivity::class.java)&#10;                    context.startActivity(intent)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFF4A4A4A)&#10;                )&#10;            ) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = &quot;Show Lights&quot;,&#10;                        color = Color.White,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Image(&#10;                        painter = painterResource(id = R.mipmap.bounce_ball),&#10;                        contentDescription = &quot;Bouncing Ball Icon&quot;&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SoundCard(sound: Sound, isPlaying: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(120.dp),&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (isPlaying) Color.DarkGray else Color(0xFF333333)&#10;        ),&#10;        border = if (isPlaying) BorderStroke(2.dp, Color.White) else null&#10;    ) {&#10;        Text(&#10;            text = sound.name,&#10;            color = Color.White,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DefaultPreview() {&#10;    LumaNoizAppTheme {&#10;        LumaNoizAppScreen()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.lusion.lumanoiz&#10;&#10;import android.content.ComponentName&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.gestures.detectTapGestures&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.safeDrawing&#10;import androidx.compose.foundation.layout.windowInsetsPadding&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.items&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.pointer.pointerInput&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.core.content.ContextCompat&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.session.MediaController&#10;import androidx.media3.session.SessionToken&#10;import com.lusion.lumanoiz.ui.theme.LumaNoizAppTheme&#10;import android.content.Intent&#10;import kotlinx.coroutines.launch&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        installSplashScreen()&#10;        enableEdgeToEdge()&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            LumaNoizAppTheme {&#10;                // A surface container using the 'background' color from the theme&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    LumaNoizAppScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;data class Sound(val name: String, val resourceId: Int)&#10;&#10;@Composable&#10;fun LumaNoizAppScreen() {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    val userPreferencesRepository = remember { UserPreferencesRepository(context) }&#10;    val sounds = remember {&#10;        listOf(&#10;            Sound(&quot;White Noise&quot;, R.raw.white_noise),&#10;            Sound(&quot;Brown Noise&quot;, R.raw.brown_noise),&#10;            Sound(&quot;Grey Noise&quot;, R.raw.grey_noise),&#10;            Sound(&quot;Pink Noise&quot;, R.raw.pink_noise),&#10;            Sound(&quot;Relaxing Smoothed Brown Noise&quot;, R.raw.relaxing_smoothed_brown_noise),&#10;            Sound(&quot;Soft Brown Noise&quot;, R.raw.soft_brown_noise)&#10;        )&#10;    }&#10;&#10;    var currentPlayingSound by remember { mutableStateOf&lt;Sound?&gt;(null) }&#10;    var isPlaying by remember { mutableStateOf(false) }&#10;&#10;    // Read anchor preference from UserPreferencesRepository&#10;    val isAnchoredToBottom by userPreferencesRepository.isAnchoredToBottom.collectAsState(initial = false)&#10;&#10;    // Media3 Controller setup&#10;    var mediaController by remember { mutableStateOf&lt;MediaController?&gt;(null) }&#10;&#10;    LaunchedEffect(context) {&#10;        val sessionToken = SessionToken(context, ComponentName(context, SoundService::class.java))&#10;        val controllerFuture = MediaController.Builder(context, sessionToken).buildAsync()&#10;        controllerFuture.addListener(&#10;            {&#10;                mediaController = controllerFuture.get()&#10;            },&#10;            ContextCompat.getMainExecutor(context)&#10;        )&#10;    }&#10;&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            mediaController?.release()&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .pointerInput(Unit) {&#10;                detectTapGestures(&#10;                    onLongPress = {&#10;                        coroutineScope.launch {&#10;                            userPreferencesRepository.setAnchoredToBottom(!isAnchoredToBottom)&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .windowInsetsPadding(WindowInsets.safeDrawing)&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = if (isAnchoredToBottom) Arrangement.Bottom else Arrangement.Top&#10;        ) {&#10;            LazyVerticalGrid(&#10;                columns = GridCells.Adaptive(minSize = 180.dp),&#10;                modifier = Modifier.weight(1f),&#10;                contentPadding = PaddingValues(8.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(sounds) { sound -&gt;&#10;                    SoundCard(&#10;                        sound = sound,&#10;                        isPlaying = sound == currentPlayingSound &amp;&amp; isPlaying,&#10;                        onClick = {&#10;                            if (sound == currentPlayingSound) {&#10;                                if (isPlaying) {&#10;                                    mediaController?.pause()&#10;                                } else {&#10;                                    mediaController?.play()&#10;                                }&#10;                                isPlaying = !isPlaying&#10;                            } else {&#10;                                mediaController?.apply {&#10;                                    setMediaItem(MediaItem.fromUri(&quot;android.resource://${context.packageName}/${sound.resourceId}&quot;))&#10;                                    prepare()&#10;                                    play()&#10;                                }&#10;                                currentPlayingSound = sound&#10;                                isPlaying = true&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    val intent = Intent(context, LightsActivity::class.java)&#10;                    context.startActivity(intent)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFF4A4A4A)&#10;                )&#10;            ) {&#10;                Row(verticalAlignment = Alignment.CenterVertically) {&#10;                    Text(&#10;                        text = &quot;Show Lights&quot;,&#10;                        color = Color.White,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Image(&#10;                        painter = painterResource(id = R.mipmap.bounce_ball),&#10;                        contentDescription = &quot;Bouncing Ball Icon&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    val intent = Intent(context, StrobeLightsActivity::class.java)&#10;                    context.startActivity(intent)&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = Color(0xFF6A4A8A)&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Strobe Lights&quot;,&#10;                    color = Color.White,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SoundCard(sound: Sound, isPlaying: Boolean, onClick: () -&gt; Unit) {&#10;    Button(&#10;        onClick = onClick,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(120.dp),&#10;        colors = ButtonDefaults.buttonColors(&#10;            containerColor = if (isPlaying) Color.DarkGray else Color(0xFF333333)&#10;        ),&#10;        border = if (isPlaying) BorderStroke(2.dp, Color.White) else null&#10;    ) {&#10;        Text(&#10;            text = sound.name,&#10;            color = Color.White,&#10;            style = MaterialTheme.typography.titleMedium,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DefaultPreview() {&#10;    LumaNoizAppTheme {&#10;        LumaNoizAppScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/lusion/lumanoiz/StrobeLightsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/lusion/lumanoiz/StrobeLightsActivity.kt" />
              <option name="originalContent" value="package com.lusion.lumanoiz&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.floatPreferencesKey&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import com.lusion.lumanoiz.ui.theme.LumaNoizAppTheme&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.roundToInt&#10;import kotlin.random.Random&#10;&#10;data class FrequencyRange(val name: String, val minHz: Float, val maxHz: Float)&#10;&#10;// DataStore extension&#10;val Context.strobeDataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;strobe_settings&quot;)&#10;&#10;// Preference keys&#10;val STROBE_FREQUENCY_KEY = floatPreferencesKey(&quot;strobe_frequency&quot;)&#10;val BALL_SIZE_KEY = floatPreferencesKey(&quot;ball_size&quot;)&#10;&#10;class StrobeSettingsRepository(private val context: Context) {&#10;    val strobeFrequency: Flow&lt;Float&gt; = context.strobeDataStore.data.map { preferences -&gt;&#10;        preferences[STROBE_FREQUENCY_KEY] ?: 8f // Default Alpha range&#10;    }&#10;&#10;    val ballSize: Flow&lt;Float&gt; = context.strobeDataStore.data.map { preferences -&gt;&#10;        preferences[BALL_SIZE_KEY] ?: 0.3f // Default 30% of screen&#10;    }&#10;&#10;    suspend fun setStrobeFrequency(frequency: Float) {&#10;        context.strobeDataStore.edit { preferences -&gt;&#10;            preferences[STROBE_FREQUENCY_KEY] = frequency&#10;        }&#10;    }&#10;&#10;    suspend fun setBallSize(size: Float) {&#10;        context.strobeDataStore.edit { preferences -&gt;&#10;            preferences[BALL_SIZE_KEY] = size&#10;        }&#10;    }&#10;}&#10;&#10;class StrobeLightsActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        enableEdgeToEdge()&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setContent {&#10;            LumaNoizAppTheme {&#10;                StrobeLightsScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StrobeLightsScreen() {&#10;    val context = LocalContext.current&#10;    val settingsRepository = remember { StrobeSettingsRepository(context) }&#10;&#10;    var showMenu by remember { mutableStateOf(false) }&#10;    var isVisible by remember { mutableStateOf(true) }&#10;&#10;    // Collect settings from DataStore&#10;    val savedFrequency by settingsRepository.strobeFrequency.collectAsState(initial = 8f)&#10;    val savedBallSize by settingsRepository.ballSize.collectAsState(initial = 0.3f)&#10;&#10;    var currentFrequency by remember { mutableStateOf(8f) }&#10;    var ballSize by remember { mutableStateOf(0.3f) }&#10;&#10;    // Update state when saved values change&#10;    LaunchedEffect(savedFrequency) {&#10;        currentFrequency = savedFrequency&#10;    }&#10;&#10;    LaunchedEffect(savedBallSize) {&#10;        ballSize = savedBallSize&#10;    }&#10;&#10;    val frequencyRanges = remember {&#10;        listOf(&#10;            FrequencyRange(&quot;Delta&quot;, 0.5f, 4f),&#10;            FrequencyRange(&quot;Theta&quot;, 4f, 8f),&#10;            FrequencyRange(&quot;Alpha&quot;, 8f, 13f), // Default&#10;            FrequencyRange(&quot;Beta&quot;, 13f, 30f)&#10;        )&#10;    }&#10;&#10;    // Strobe effect for the ball&#10;    LaunchedEffect(currentFrequency) {&#10;        val intervalMs = (1000f / currentFrequency / 2f).toLong() // Divide by 2 for on/off cycle&#10;        while (true) {&#10;            isVisible = !isVisible&#10;            kotlinx.coroutines.delay(intervalMs)&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.Black)&#10;            .clickable { showMenu = true },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Strobing ball/circle in center&#10;        if (isVisible) {&#10;            BoxWithConstraints {&#10;                val ballDiameter = minOf(maxWidth, maxHeight) * ballSize&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(ballDiameter)&#10;                        .clip(CircleShape)&#10;                        .background(Color.White)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Show current frequency in top corner for reference&#10;        Text(&#10;            text = &quot;${currentFrequency.roundToInt()} Hz&quot;,&#10;            color = Color.Gray,&#10;            fontSize = 16.sp,&#10;            modifier = Modifier&#10;                .align(Alignment.TopEnd)&#10;                .padding(16.dp)&#10;        )&#10;    }&#10;&#10;    // Pause Menu Dialog&#10;    if (showMenu) {&#10;        Dialog(onDismissRequest = { showMenu = false }) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color(0xFF2D2D2D)&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Strobe Settings&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Ball Size Slider&#10;                    Text(&#10;                        text = &quot;Ball Size: ${(ballSize * 100).roundToInt()}%&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 16.sp,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Slider(&#10;                        value = ballSize,&#10;                        onValueChange = { newSize -&gt;&#10;                            ballSize = newSize&#10;                        },&#10;                        onValueChangeFinished = {&#10;                            // Save to DataStore when slider interaction is finished&#10;                            kotlinx.coroutines.GlobalScope.launch {&#10;                                settingsRepository.setBallSize(ballSize)&#10;                            }&#10;                        },&#10;                        valueRange = 0.1f..0.8f,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(bottom = 24.dp),&#10;                        colors = SliderDefaults.colors(&#10;                            thumbColor = Color.White,&#10;                            activeTrackColor = Color(0xFF6A4A8A),&#10;                            inactiveTrackColor = Color.Gray&#10;                        )&#10;                    )&#10;&#10;                    // Frequency Range Buttons&#10;                    Text(&#10;                        text = &quot;Frequency Range&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    frequencyRanges.forEach { range -&gt;&#10;                        Button(&#10;                            onClick = {&#10;                                val randomFreq = Random.nextFloat() * (range.maxHz - range.minHz) + range.minHz&#10;                                currentFrequency = randomFreq&#10;                                // Save to DataStore&#10;                                kotlinx.coroutines.GlobalScope.launch {&#10;                                    settingsRepository.setStrobeFrequency(randomFreq)&#10;                                }&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = if (currentFrequency &gt;= range.minHz &amp;&amp; currentFrequency &lt;= range.maxHz)&#10;                                    Color(0xFF6A4A8A) else Color(0xFF4A4A4A)&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${range.name}: ${range.minHz}-${range.maxHz} Hz&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Button(&#10;                        onClick = { showMenu = false },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Color(0xFF666666)&#10;                        )&#10;                    ) {&#10;                        Text(&quot;Close&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.lusion.lumanoiz&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.datastore.core.DataStore&#10;import androidx.datastore.preferences.core.Preferences&#10;import androidx.datastore.preferences.core.edit&#10;import androidx.datastore.preferences.core.floatPreferencesKey&#10;import androidx.datastore.preferences.preferencesDataStore&#10;import com.lusion.lumanoiz.ui.theme.LumaNoizAppTheme&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import kotlinx.coroutines.launch&#10;import kotlin.math.roundToInt&#10;import kotlin.random.Random&#10;&#10;data class FrequencyRange(val name: String, val minHz: Float, val maxHz: Float)&#10;&#10;// DataStore extension&#10;val Context.strobeDataStore: DataStore&lt;Preferences&gt; by preferencesDataStore(name = &quot;strobe_settings&quot;)&#10;&#10;// Preference keys&#10;val STROBE_FREQUENCY_KEY = floatPreferencesKey(&quot;strobe_frequency&quot;)&#10;val BALL_SIZE_KEY = floatPreferencesKey(&quot;ball_size&quot;)&#10;&#10;class StrobeSettingsRepository(private val context: Context) {&#10;    val strobeFrequency: Flow&lt;Float&gt; = context.strobeDataStore.data.map { preferences -&gt;&#10;        preferences[STROBE_FREQUENCY_KEY] ?: 8f // Default Alpha range&#10;    }&#10;&#10;    val ballSize: Flow&lt;Float&gt; = context.strobeDataStore.data.map { preferences -&gt;&#10;        preferences[BALL_SIZE_KEY] ?: 0.3f // Default 30% of screen&#10;    }&#10;&#10;    suspend fun setStrobeFrequency(frequency: Float) {&#10;        context.strobeDataStore.edit { preferences -&gt;&#10;            preferences[STROBE_FREQUENCY_KEY] = frequency&#10;        }&#10;    }&#10;&#10;    suspend fun setBallSize(size: Float) {&#10;        context.strobeDataStore.edit { preferences -&gt;&#10;            preferences[BALL_SIZE_KEY] = size&#10;        }&#10;    }&#10;}&#10;&#10;class StrobeLightsActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        enableEdgeToEdge()&#10;        super.onCreate(savedInstanceState)&#10;&#10;        setContent {&#10;            LumaNoizAppTheme {&#10;                StrobeLightsScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun StrobeLightsScreen() {&#10;    val context = LocalContext.current&#10;    val settingsRepository = remember { StrobeSettingsRepository(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    var showMenu by remember { mutableStateOf(false) }&#10;    var isVisible by remember { mutableStateOf(true) }&#10;&#10;    // Collect settings from DataStore&#10;    val savedFrequency by settingsRepository.strobeFrequency.collectAsState(initial = 8f)&#10;    val savedBallSize by settingsRepository.ballSize.collectAsState(initial = 0.3f)&#10;&#10;    var currentFrequency by remember { mutableStateOf(8f) }&#10;    var ballSize by remember { mutableStateOf(0.3f) }&#10;&#10;    // Update state when saved values change&#10;    LaunchedEffect(savedFrequency) {&#10;        currentFrequency = savedFrequency&#10;    }&#10;&#10;    LaunchedEffect(savedBallSize) {&#10;        ballSize = savedBallSize&#10;    }&#10;&#10;    val frequencyRanges = remember {&#10;        listOf(&#10;            FrequencyRange(&quot;Delta&quot;, 0.5f, 4f),&#10;            FrequencyRange(&quot;Theta&quot;, 4f, 8f),&#10;            FrequencyRange(&quot;Alpha&quot;, 8f, 13f), // Default&#10;            FrequencyRange(&quot;Beta&quot;, 13f, 30f)&#10;        )&#10;    }&#10;&#10;    // Strobe effect for the ball&#10;    LaunchedEffect(currentFrequency) {&#10;        val intervalMs = (1000f / currentFrequency / 2f).toLong() // Divide by 2 for on/off cycle&#10;        while (true) {&#10;            isVisible = !isVisible&#10;            kotlinx.coroutines.delay(intervalMs)&#10;        }&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.Black)&#10;            .clickable { showMenu = true },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        // Strobing ball/circle in center&#10;        if (isVisible) {&#10;            BoxWithConstraints {&#10;                val ballDiameter = minOf(maxWidth, maxHeight) * ballSize&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(ballDiameter)&#10;                        .clip(CircleShape)&#10;                        .background(Color.White)&#10;                )&#10;            }&#10;        }&#10;&#10;        // Show current frequency in top corner for reference&#10;        Text(&#10;            text = &quot;${currentFrequency.roundToInt()} Hz&quot;,&#10;            color = Color.Gray,&#10;            fontSize = 16.sp,&#10;            modifier = Modifier&#10;                .align(Alignment.TopEnd)&#10;                .padding(16.dp)&#10;        )&#10;    }&#10;&#10;    // Pause Menu Dialog&#10;    if (showMenu) {&#10;        Dialog(onDismissRequest = { showMenu = false }) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = Color(0xFF2D2D2D)&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Strobe Settings&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.White,&#10;                        modifier = Modifier.padding(bottom = 24.dp)&#10;                    )&#10;&#10;                    // Ball Size Slider&#10;                    Text(&#10;                        text = &quot;Ball Size: ${(ballSize * 100).roundToInt()}%&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 16.sp,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Slider(&#10;                        value = ballSize,&#10;                        onValueChange = { newSize -&gt;&#10;                            ballSize = newSize&#10;                        },&#10;                        onValueChangeFinished = {&#10;                            // Save to DataStore when slider interaction is finished&#10;                            coroutineScope.launch {&#10;                                settingsRepository.setBallSize(ballSize)&#10;                            }&#10;                        },&#10;                        valueRange = 0.1f..0.8f,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(bottom = 24.dp),&#10;                        colors = SliderDefaults.colors(&#10;                            thumbColor = Color.White,&#10;                            activeTrackColor = Color(0xFF6A4A8A),&#10;                            inactiveTrackColor = Color.Gray&#10;                        )&#10;                    )&#10;&#10;                    // Frequency Range Buttons&#10;                    Text(&#10;                        text = &quot;Frequency Range&quot;,&#10;                        color = Color.White,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 16.dp)&#10;                    )&#10;&#10;                    frequencyRanges.forEach { range -&gt;&#10;                        Button(&#10;                            onClick = {&#10;                                val randomFreq = Random.nextFloat() * (range.maxHz - range.minHz) + range.minHz&#10;                                currentFrequency = randomFreq&#10;                                // Save to DataStore&#10;                                coroutineScope.launch {&#10;                                    settingsRepository.setStrobeFrequency(randomFreq)&#10;                                }&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = if (currentFrequency &gt;= range.minHz &amp;&amp; currentFrequency &lt;= range.maxHz)&#10;                                    Color(0xFF6A4A8A) else Color(0xFF4A4A4A)&#10;                            )&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${range.name}: ${range.minHz}-${range.maxHz} Hz&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Button(&#10;                        onClick = { showMenu = false },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = Color(0xFF666666)&#10;                        )&#10;                    ) {&#10;                        Text(&quot;Close&quot;, color = Color.White)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>